name: Deploy to AWS Lambda

on:
  push:
    branches:
      - chore/deploy-to-aws-lambda

jobs:
  deploy:
    if: "${{ github.ref == 'refs/heads/chore/deploy-to-aws-lambda' }}"
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set stage
        id: set_stage
        run: |
          echo "stage=dev" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache \
            -f Dockerfile.dev \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg DYNAMO_REGION=${{ secrets.DYNAMO_REGION }} \
            --push \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to AWS Lambda
        env:
          FUNCTION_NAME: ${{ vars.AWS_LAMBDA_FUNCTION_NAME }}
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI
