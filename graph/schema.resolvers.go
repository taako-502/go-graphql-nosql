package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"go-graphql-nosql/graph/model"
	"go-graphql-nosql/utility"
	"time"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	currentTime := utility.FormatDateForDynamoDB(time.Now())
	uuid := uuid.NewString()
	todo := &model.Todo{
		ID:          uuid,
		Title:       input.Title,
		Description: input.Description,
		Done:        false,
		UserID:      input.UserID,
		DueDateTime: input.DueDateTime,
		Status:      "CREATED",
		CreatedAt:   currentTime,
		UpdatedAt:   currentTime,
	}

	table := r.DB.Table("Todo")
	if err := table.Put(todo).Run(); err != nil {
		return nil, err
	}

	return todo, nil
}

// UpdateTodoStatus is the resolver for the updateTodoStatus field.
func (r *mutationResolver) UpdateTodoStatus(ctx context.Context, id string, status string) (*model.Todo, error) {
	table := r.DB.Table("Todo")
	if err := table.Update("ID", id).Set("Status", status).Run(); err != nil {
		return nil, err
	}
	return &model.Todo{ID: id, Status: status}, nil
}

// DeleteTodoByID is the resolver for the deleteTodoById field.
func (r *mutationResolver) DeleteTodoByID(ctx context.Context, id string) (*model.Todo, error) {
	if err := r.DB.Table("Todo").Delete("ID", id).Run(); err != nil {
		return nil, err
	}
	return &model.Todo{ID: id}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	var todos []*model.Todo
	table := r.DB.Table("Todo")
	if err := table.Scan().All(&todos); err != nil {
		return nil, err
	}
	return todos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
